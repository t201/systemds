#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------
##################################################################################################################
# This script will read the dirty and clean data, then it will apply the best pipeline on dirty data
# and then will classify both cleaned dataset and check if the cleaned dataset is performing same as original dataset
# in terms of classification accuracy

# Vocab = original data -> dataset without any noise, the original version with ground truths
        # cleaned data -> dirty dataset cleaned by pipeline
# read the items
# dirty dataset F
# clean dataset O
# metadata (schema and mask)
# best k pipelines and hyperparameters generated by previous script mainScript.dml

# do the initial preprocessing like dropping invalid values so that pipeline could fix them
# then recode the data to bring it into matrix format
# then construct the hyper-parameters list and call the executePipeline() on the dirty dataset
# for the comparison OHE the original dataset, there is no need to OHE the cleaned dataset because cleaning pipeline
# has a primitive for this
# Call the multilogReg on both of the datasets and compare accuracy on k=3 cross validation
######################################################################################################################

source("scripts/pipelines/scripts/utils.dml") as utils;
source("scripts/builtin/bandit.dml") as bandit;


F = read($1, data_type="frame", format="csv", header=FALSE, 
  naStrings= ["NA", "null","  ","NaN", "nan", "", "?", "99999"]);
# read original clean data  
O = read($2, data_type="frame", format="csv", header=FALSE, 
  naStrings= ["NA", "null","  ","NaN", "nan", "", "?", "99999"]);  

metaInfo = read($3, data_type="frame", format="csv", header=FALSE);  
input = $4
pip = read(input+"pipelines.csv", data_type="frame", format="csv", header=FALSE);
hp = read(input+"hyperparams.csv", data_type="matrix", format="csv", header=FALSE);

getSchema = metaInfo[1, 2:ncol(metaInfo)]
getMask = as.matrix(metaInfo[2, 2:ncol(metaInfo)])
getFdMask = as.matrix(metaInfo[3, 2:ncol(metaInfo)]) # columns of interest for FD computation

# # dropInvalid function will remove the values which are not the part 
# # of the column data type  
X = utils::stringProcessing(F, getMask, getSchema)

# encode the categorical data
if(sum(getMask) > 0)
{
  # recode the dirty data, always recode the label
  index = utils::vectorToCsv(getMask)
  jspecR = "{ids:true, recode:["+index+"]}"
  [eX, X_meta] = transformencode(target=X, spec=jspecR);   
} 
# if no categorical value exist then just cast the frame into matrix
else
  eX = as.matrix(X)

# extract the class label  
eY = eX[, ncol(eX)]
eX = eX[, 1:ncol(eX) - 1]


# strip the mask of class label
getMask = getMask[, 1:ncol(getMask) - 1] # strip the mask of class label
getSchema = getSchema[, 1:ncol(getSchema) - 1] # strip the mask of class label
getFdMask = getFdMask[, 1:ncol(getFdMask) - 1] # strip the mask of class label


FD = discoverFD(X=replace(target=eX, pattern=NaN, replacement=1), Mask=getFdMask, threshold=0.8)
FD = (diag(matrix(1, rows=nrow(FD), cols=1)) ==0) * FD 
FD = FD > 0
# construct the parameter list for best hyper-parameters if the oversampling technique is part of 
# pipeline then take it out because oversampling is not applied on test dataset
# this condition is unnecessary here in this case because the input dataset is balanced and 
# instead of diving the dataset into train/test I am doing cross validations

no_of_param = as.scalar(hp[1, 1]) + 1
hp_width= hp[1, 2:no_of_param]
hp_matrix = matrix(hp_width, rows=ncol(pip), cols=ncol(hp_width)/ncol(pip))

# # clean using best pipeline 
[cX , cY] = executePipeline(pip[1], eX, eY, getMask, FD, hp_matrix, 5, FALSE)

if(sum(getMask) > 0)
{
  # dummycode the original data
  index = utils::vectorToCsv(getMask)
  jspec = "{ids:true, dummycode:["+index+"], recode:["+ ncol(O)+"] }"
  [oX, X_meta] = transformencode(target=O, spec=jspec); 
} 
# if no categorical value exist then just cast the frame into matrix
else 
  oX = as.matrix(O)

# # extract the class label of original data
oY = oX[, ncol(oX)]
oX = oX[, 1:ncol(oX) - 1]



# do the k cross validations for original clean data
accuracyMatrix = bandit::crossV(oX, oY, 3, as.matrix(0), matrix("0 0.000001 100", rows=1, cols=3), TRUE)
accuracyMatrix = removeEmpty(target=accuracyMatrix, margin="rows")
oAcc = mean(accuracyMatrix)

# do the k cross validations for cleaned data
accuracyMatrix = bandit::crossV(cX, cY, 3, as.matrix(0), matrix("0 0.000001 100", rows=1, cols=3), TRUE)
accuracyMatrix = removeEmpty(target=accuracyMatrix, margin="rows")
cAcc = mean(accuracyMatrix)
tol = 1

results = (tol+cAcc) >=  oAcc
print("clean accuracy "+cAcc)
print("original accuracy "+oAcc)
write(results, $5, format = "text")

